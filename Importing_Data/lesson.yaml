- Class: meta
  Course: fes720_Explore
  Lesson: Importing_Data
  Author: Simon Queenborough
  Type: Standard
  Organization: FES
  Version: 0.0.1

- Class: text
  Output: In this lesson, you will learn about importing data.

- Class: text
  Output: We will practice using the various functions to read in data.


- Class: text
  Output: There are various datasets installed with this lesson. 
  
- Class: text
  Output: "However, we have to find them!"
  
- Class: text
  Output: "We can do this by changing our working directory to where R has 
    stored the data in your hard drive."
  
- Class: cmd_question
  Output: "First, let's check our current working directory, with getwd()."
  CorrectAnswer: getwd()
  AnswerTests: omnitest(correctExpr='getwd()')
  Hint: getwd()
  
  
- Class: cmd_question
  Output: "You can find the path to the lesson datasets using an object that we created, called 'lessonpath'. 
    To see the path, type 'lessonpath'. This should display where on your computer the 
    files for this lesson are stored."
  CorrectAnswer: lessonpath
  AnswerTests: omnitest(correctExpr='lessonpath')
  Hint: "Type: lessonpath"

- Class: cmd_question
  Output: "Now, you will need to change your working directory to this location. Type: setwd(lessonpath)."
  CorrectAnswer: setwd(lessonpath)
  AnswerTests: omnitest(correctExpr='setwd(lessonpath)')
  Hint: "Type: setwd(lessonpath)"

- Class: text
  Output: "Now, our working directory is located in the 'data' directory for this swirl lesson. 
    All the data files for this lesson are located here."
    

- Class: cmd_question
  Output: "OK, let's read in some simple data! We have made the custom function 
    viewData() that will open up the data files in the RSudio text editor, so that
    you can look at the raw data as we try and read it in. Look at the first data
    set, example1.txt."
  CorrectAnswer: viewData('test1.txt')
  AnswerTests: omnitest(correctExpr="viewData('test1.txt')")
  Hint: "Put 'test1.txt' within the call t0 viewData()."
  
- Class: cmd_question
  Output: Now that you have looked at this data, we will use the read.table() function first.
    Use read.table to read in the first example dataset, 
    called example1.txt. Do not worry about assigning this data to any variable for now, just
    read it in."
  CorrectAnswer: read.table(paste0(lessonpath, 'test1.txt'))
  AnswerTests: omnitest(correctExpr="read.table(paste0(lessonpath, 'test1.txt'))")
  Hint: remember to use the paste0() expression we worked out above
  
- Class: cmd_question
  Output: "This object does not look exactly like the dataset we saw. To examine the
    data in more detail we will need to look at its' stucture. Embed the previous call to read.table()
    within a call to str()."
  CorrectAnswer: str(read.table(paste0(lessonpath, 'test1.txt')))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'test1.txt')))")
  Hint: Use str() ... 
  
- Class: cmd_question
  Output: "So we have a dataset that looks like it should be four columns and five rows.
    However, we have four columns of factors, not numbers. :( *sad face*
    What to do? Well, we can tell R that the first row of this data is the column names,
    or header. Try that within the previous expression."
  CorrectAnswer: str(read.table(paste0(lessonpath, 'test1.txt'), header = TRUE))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'test1.txt'), header = TRUE))")
  Hint: "Change the header argument in the read.table() function. Check the parentheses carefully!"
  
- Class: text
  Output: "That looks better! We now have a dataset of four numeric columns, with each column named
    a different letter. We will basically be using this set-up to examine reading in 
    different datasets. Now, let's get into specifics of column separators ..."
    
- Class: cmd_question
  Output: "We used read.table(), which use generic white space as its column delimitor. How
  about we try setting the delimitor to a comma instead. What happens?"
  CorrectAnswer: str(read.table(paste0(lessonpath, 'test1.txt'), header = TRUE, sep = ','))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'test1.txt'), header = TRUE, sep = ','))")
  Hint: Set the sep argument within read.table() to a comma.

- Class: text
  Output: "We still get a dataframe, but of only one column! The column separator here is obviously
    not a comma. However, this example does illustrate a couple of other aspects of read.table()."

- Class: text 
  Output: "First, we told R that the column separator *is* a comma. Therefore, because there are not any
    commas in the data, R thinks that the data is just one big column. As such, R has put periods
    in between each letter of the column header."
    
- Class: text
  Output: "Moreover, R has treated each row as an entire cell in the data and converted them to factors. 
    You can see that the *real* separator is a tab (indicated by the backslash t, '\\t')."
    
- Class: cmd_question
  Output: "Now that we know what the actual separator is, let's put that in place of the comma."
  CorrectAnswer: str(read.table(paste0(lessonpath, 'test1.txt'), header = TRUE, sep = ','))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'test1.txt'), header = TRUE, sep = '\t'))")
  Hint: replace the comma with a \t in the sep = argument.
  
- Class: text
  Output: "We get our nice dataframe back again. Yay!"
  
- Class: cmd_question
  Output: "Now that we can read in a tab-delimited text file, let's try our hand at a .csv file.
    First, open the 'example2.csv' file with the viewData() function."
  CorrectAnswer: viewData('example2.csv')
  AnswerTests: omnitest(correctExpr="viewData('example2.csv')")  
  Hint: Put the file name in single quotes in a call to viewData().
  
- Class: cmd_question
  Output: "Now try and read in the example2.csv file using the read.csv() function. 
    You can drop both the header = TRUE and sep =  arguments, because the default for 
    read.csv() is header = TRUE, sep = ','."
  CorrectAnswer: str(read.csv(paste0(lessonpath, 'example2.csv'), header = TRUE))
  AnswerTests: omnitest(correctExpr="str(read.csv(paste0(lessonpath, 'example2.csv')))")
  Hint: Use read.csv().
    
- Class: cmd_question
  Output: "One of the features of R that is hopefully appearing in your mind, is that 
    there are many ways to skin a cat in R. We can use the read.csv() function to read in
    a csv file with the first row as headers. The read.csv() sets these two arguments
    a defaults. However, we could also use the read.table() function to read in this .csv
    file, by changing the defaults. See if you can read example2.csv with read.table(). 
    Embed it in the str() as before."
  CorrectAnswer: str(read.table(paste0(lessonpath, 'example2.csv'), header = TRUE, sep = ','))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'example2.csv'), header = TRUE, sep = ','))")
  Hint: Use read.table() and set the header and sep arguments.

- Class: text
  Output: "Now, you should be happy using read.table() and read.csv() to import data into R."
  
- Class: text
  Output: "The functions read.csv2(), read.delim(), and read.delim2() work similarly to read.csv() in 
    that they set different defaults. Check the help files and the class lecture for more 
    information if you want, otherwise, you can just use read.table() and read.csv() and set
    and arguments you need to for each specific dataset."
    
- Class: text
  Output: "Now we will try and read in some data that has some errors. You should be able to modify 
    the data in the text editor, save it using 'Ctrl-S' or the 'save' button in RStudio, and try and 
    read the data in to R."
  
- Class: cmd_question
  Output: "We will start with example3.txt. Open this file with viewData()."
  CorrectAnswer: viewData('example3.txt')
  AnswerTests: omnitest(correctExpr="viewData('example3.txt')")
  Hint: none
  
- Class: text
  Output: "**IMPORTANT!:** Before you do anything else, read this text!"
  
- Class: text
  Output: "The following questions depend on two things: the correct code 
    AND the correct data."
    
- Class: text
  Output: "To proceed in the lesson, you will have to edit the data in the text editor
    such that it can be read into R."
    
- Class: text
  Output: "Got that? Ok, let's carry on ..."
  
- Class: cmd_question
  Output: "First, try and read example3.txt in to R with read.table(). Embed the code in the 
    structure function as before. It will not work. You will have to edit and save the
    data file."
  CorrectAnswer: str(read.table(paste0(lessonpath, 'example3.txt'), header = TRUE))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'example3.txt'), header = TRUE))")
  Hint: "The code you need is: str(read.table(paste0(lessonpath, 'example3.txt'), header = TRUE)).
    But, you will also need to edit the text file."

- Class: text
  Output: "You received at least one (maybe several!) error messages trying to read in the example3.txt 
    file. The useful one stated something like 'line 1 did not have 5 elements' and 'incomplete
    final line ...'. These errors were caused by the apostrophe in the first row of the data. Deleting
    that apostrophe allowed the data to be read in correctly."
    
- Class: cmd_question
  Output: "Let's try another one. Open example4.txt."
  CorrectAnswer: viewData('example4.txt')
  AnswerTests: omnitest(correctExpr="viewData('example4.txt')")
  Hint: none


- Class: cmd_question
  Output: "Great, now edit that file and try and read it in with read.table() as before."
  CorrectAnswer: str(read.table(paste0(lessonpath, 'example4.txt'), header = TRUE))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'example4.txt'), header = TRUE))")
  Hint: "The code you need is: str(read.table(paste0(lessonpath, 'example4.txt'), header = TRUE)).
    But, you will also need to edit the text file."

- Class: text
  Output: "That one had an errant comment ..."

- Class: cmd_question
  Output: "Let's try another one. Open example5.txt."
  CorrectAnswer: viewData('example5.txt')
  AnswerTests: omnitest(correctExpr="viewData('example5.txt')")
  Hint: viewData() ;)


- Class: cmd_question
  Output: "Great, now edit that file and try and read it in with read.table() as before. In 
    this case, we want to force the separator to be a tab, so set sep = '\t'."
  CorrectAnswer: str(read.table(paste0(lessonpath, 'example5.txt'), header = TRUE, sep = '\t'))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'example5.txt'), header = TRUE, sep = '\t'))")
  Hint: "The code you need is: str(read.table(paste0(lessonpath, 'example5.txt'), header = TRUE, sep = '\t')).
    But, you will also need to edit the text file."
  
- Class: cmd_question
  Output: "Let's try another one. Open example6.txt."
  CorrectAnswer: viewData('example6.txt')
  AnswerTests: omnitest(correctExpr="viewData('example6.txt')")
  Hint: Not this time ...


- Class: cmd_question
  Output: "Great, now edit that file and try and read it in with read.table() as before."
  CorrectAnswer: str(read.table(paste0(lessonpath, 'example6.txt'), header = TRUE))
  AnswerTests: omnitest(correctExpr="str(read.table(paste0(lessonpath, 'example6.txt'), header = TRUE))")
  Hint: "The code you need is: str(read.table(paste0(lessonpath, 'example6.txt'), header = TRUE)).
    But, you will also need to edit the text file."
  
- Class: mult_question
  Output: Please submit the log of this lesson to Google Forms so
    that Simon may evaluate your progress.
  AnswerChoices: Yes, yes, yes!
  CorrectAnswer: Yes, yes, yes!
  AnswerTests: submit_log()
  Hint: hint


